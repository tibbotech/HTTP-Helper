include "global.tbh"
dim test_no as byte = 0
dim test_inprogress as boolean = true
const NUM_OF_TESTS = 40
dim starttime as dword
dim chunk_loop as byte = 1

type http_test
	method as HTTP_REQUEST_METHODS
	url as string
	data as string
	cert as string
	expected_to_complete as boolean
	check_cert as boolean
	result as string
end type

dim tests as http_test(NUM_OF_TESTS) = {

	{HTTP_GET, "https://104.40.239.93/","","sample.cer",true}, 																		'IP Address
	{HTTP_GET, "http://192.168.1.156:8800/chunked","","",true}, 																	'Chunked check content
	{HTTP_GET, "http://192.168.1.156:8800/notChunked","data=test_data","",true}, 													'Check content arrival
	{HTTP_GET, "http://192.168.1.156:8800/noContent","","",true}, 																	'Check no content arrival
	{HTTP_GET, "http://anglesharp.azurewebsites.net/Chunked","","",true},															'Chunked
	{HTTP_GET, "http://httpbin.org/get","","",true,}, 																				'Get request
	{HTTP_POST, "http://httpbin.org/post","data","",true}, 																			'Post request
	{HTTP_GET, "http://httpbin.org:100/get","","",false}, 																			'Port
	{HTTP_GET, "https://104.40.239.93:100/", "", "sample.cer",false}, 																'IP Address and Port
	{HTTP_GET, "http://httpbin.org:443/get","","",false}, 																			'Not HTTPS and port 443
	{HTTP_GET, "https://httpbin.org:100/get","","",false}, 																			'HTTPS and not port 443
	{HTTP_GET, "httpbin.org/get","","",false}, 																						'Malformed URL
	{HTTP_GET, "http://httpbin.org/get/","","",true}, 																				'Trailing slash (Should complete but return 404)
	{HTTP_GET, "https://shopee.tw/","","""",true}, 																					'Don't check certificate
	{HTTP_GET, "http://anglesharp.azurewebsites.net/Chunked","","",true},															'Chunked
	{HTTP_POST, "http://httpbin.org/post", "sensor_data",  "httpbin.cer",true},												
	{HTTP_POST, "http://httpbin.org/post", "765",  "httpbin.cer",true},
	{HTTP_POST, "https://httpbin.org/post", "765",  "httpbin.cer",true},
	{HTTP_POST, "https://httpbin.org/post", "sensor_data", "httpbin.cer",true},
	{HTTP_GET, "https://www.amazon.com/", "", "amazon.cer",true},
	{HTTP_GET, "https://images-na.ssl-images-amazon.com/images/G/01/error/174._TTD_.jpg", "", "amazon.cer",true},
	{HTTP_GET, "https://www.google.com/", "", "google.cer",true},
	{HTTP_GET, "https://img-prod-cms-rt-microsoft-com.akamaized.net/cms/api/am/imageFileData/RE1Mu3b?ver=5c31", "", "ms2.cer",true},
	{HTTP_GET, "https://www.microsoft.com/zh-tw", "", "ms.cer",true},
	{HTTP_GET, "http://anglesharp.azurewebsites.net/Chunked", "", "",true},
	{HTTP_GET, "http://anglesharp.azurewebsites.net/Chunked", "", "",true},
	{HTTP_GET, "http://anglesharp.azurewebsites.net/Chunked", "", "",true},
	{HTTP_GET, "https://104.40.239.93/", "", "sample.cer",true}, 'ECDS SERVER USE SETUP SSL EXAMPLE
	{HTTP_GET, "https://104.40.239.93/lorem_ipsum.html", "", "sample.cer",true}, 'ECDS SERVER USE SETUP SSL EXAMPLE
	{HTTP_GET, "http://anglesharp.azurewebsites.net/Chunked", "", "",true},
	{HTTP_GET, "https://104.40.239.93/lorem_ipsum.html", "", "sample.cer",true}, 'ECDS SERVER USE SETUP SSL EXAMPLE
	{HTTP_GET, "http://192.168.1.93/", "", "",true}, 'ECDS SERVER USE SETUP SSL EXAMPLE
	{HTTP_GET, "http://192.168.1.93:3067", "", "",true}, 'PORT
	{HTTP_GET, "http://192.168.1.93:3067/", "", "",true}, 'PORT
	{HTTP_GET, "https://104.40.239.93/lorem_ipsum.html", "", "sample.cer",true}, 'ECDS SERVER USE SETUP SSL EXAMPLE
	{HTTP_GET, "http://192.168.1.55/test.html","","",true,},																		'Get request

}

sub on_sys_init()
'	#if PLATFORM_ID<>WM2000
		dhcp_start(HTTP_REQUEST_INTERFACE,"","")
'	#endif

'	wln.autoconnect=YES
'	wln.autodhcp=YES
'	wln.autoconnectssid="Tibbo9F"
'	wln.autoconnectpassword="16836836"
	dns_start(sock_get("DNS"))	
   'HTTP server setup
    '================================================================

	sock.num=sock_get("SER")
	sock.txbuffrq(10)
	sock.varbuffrq(1)
	sys.buffalloc()
	sock.redir(PL_REDIR_SOCK0 + sock.num)
	sock.protocol=PL_SOCK_PROTOCOL_TCP
	sock.httpportlist="80"
	sock.allowedinterfaces="WLN"
	sock.inconmode=PL_SOCK_INCONMODE_ANY_IP_ANY_PORT

end sub

sub do_test()
	test_inprogress = true
'	starttime=sys.timercountms
	if test_no < NUM_OF_TESTS AND tests(test_no).url<>"" then
		sys.debugprint("Test " + str(test_no) + " started\r\n")
		dim test as http_test = tests(test_no)
'		http_request_long_with_buffers(test.method, test.url,HTTP_REQUEST_INTERFACE,510,test.content_type,2,2)
'		http_request(test.method, test.url,HTTP_REQUEST_INTERFACE,test.data)
		test.result=""
		if val(test.data)<>0 then
			http_request_long(test.method, test.url,HTTP_REQUEST_INTERFACE,val(test.data))
		else
			http_request(test.method, test.url,HTTP_REQUEST_INTERFACE,test.data)
		end if
		
	else
		sys.debugprint("Tests ended\r\n")
		dim i as byte = 0
		for i=0 to NUM_OF_TESTS-1
			if tests(i).url<>"" then
				sys.debugprint("Test " + str(i) + " " + tests(i).result + " " + tests(i).url + "\r\n")
			end if
		next i
	end if
	
end sub


function callback_http_open_romfile() as dword
	
	if tests(test_no).cert <> "" then
		romfile.open(tests(test_no).cert)
		callback_http_open_romfile=romfile.offset
	else
		callback_http_open_romfile=0
	end if

end function

sub on_sock_data_arrival()

	dhcp_proc_data()
	dns_proc_data()
	http_proc_data()
		
end sub

sub on_sock_data_sent

	http_on_sock_data_sent()

end sub

sub on_sock_event(newstate as enum pl_sock_state, newstatesimple as enum pl_sock_state_simple)
	
	http_sock_state_update(newstatesimple)
		
end sub

sub http_endpoint_requested_test()
    
	sys.debugprint("AAA"+ "\r\n")
	sock.setdata("a")
    sock.send()

end sub


dim pointer as dword
dim romfile_opened as boolean=false

sub callback_http_send_post_data(remaining_content_length as dword)

	dim c as byte
	dim s as string 
	for c=0 to 254
		s=s+"x"
	next c
'  	dim s as string = "data="+http_encode_url("data 1/.")
	dim b as byte = http_send_post_data(s)
	
end sub

sub test_passed()
	
	sys.debugprint("Test Number " + str(test_no) + ": Passed\r\n")
	tests(test_no).result = "Passed"
	test_no=test_no+1
	test_inprogress = false
	
end sub

sub test_failed(error_message as string)

	sys.debugprint("Test Number " + str(test_no) + ": Failed\r\n")
	tests(test_no).result = error_message 	
	test_no=test_no+1
	test_inprogress = false

end sub

sub callback_http_request_complete()
	
	if tests(test_no).expected_to_complete=true then
		if test_no<=1 then
			if tests(test_no).result="" then
				test_passed()
			else
				test_failed("Failed - Passed when expected to fail")
			end if
		else
			test_passed()
		end if
	end if

end sub

sub callback_http_request_failed(error_message as string)

	if tests(test_no).result="" then
		test_passed()
	else
		test_failed(error_message)
	end if
	test_no=test_no+1
	test_inprogress = false

end sub

sub on_sys_timer()

	wln_proc_timer()
	dhcp_proc_timer()
	dns_proc_timer()
	http_proc_timer()
	if test_inprogress<>true then
		do_test()
	end if
	
end sub

sub on_wln_task_complete(completed_task as pl_wln_tasks)

	wln_proc_task_complete(completed_task)
	
end sub

sub on_wln_event(wln_event as pl_wln_events)

	wln_proc_event(wln_event)
	
end sub

sub callback_wln_ok()
		
end sub


sub callback_dhcp_ok(renew as no_yes, interface as pl_sock_interfaces, byref ip as string, byref gateway_ip as string, byref netmask as string, lease_time as dword)

#if NET_AVAILABLE
	if interface=PL_SOCK_INTERFACE_NET then
		if renew=YES and net.ip<>ip then
			sys.reboot
		end if
		if net.ip<>ip then
			net.ip=ip
			net.gatewayip=gateway_ip
			net.netmask=netmask
		end if
	end if
#endif
	
	if interface=PL_SOCK_INTERFACE_WLN then
		if renew=YES and wln.ip<>ip then
			sys.reboot
		end if
		if wln.ip<>ip then
			wln.ip=ip
			wln.gatewayip=gateway_ip
			wln.netmask=netmask
		end if
	end if		
	test_inprogress = false
		
end sub

sub callback_http_post_data_sent_ok()
	
	sys.debugprint("\r\nData sent ok\r\n")
	
end sub

sub callback_dns_answer_acquired(return_type as en_dns_return_type, byref return_string as string)
	
	http_dns_answer_acquired(return_type, return_string)

end sub

sub callback_dns_ok()

end sub

sub callback_dhcp_failure(interface as pl_sock_interfaces,failure_code as en_dhcp_status_codes)	
end sub

sub callback_wln_failure(wln_state as en_wln_status_codes)
end sub

sub callback_dns_failure(status as en_dns_status_codes)
	http_dns_failure()
end sub

sub callback_dns_pre_buffrq(num_of_pages_required as byte)
end sub

sub callback_dns_buff_released()
end sub

sub callback_wln_starting_association()
end sub

sub callback_wln_pre_buffrq(required_buff_pages as byte)
end sub

sub callback_wln_rescan_result(current_rssi as byte, scan_rssi as byte, different_ap as no_yes)
end sub

sub callback_wln_rescan_for_better_ap()
end sub

sub callback_dhcp_pre_clear_ip(interface as pl_sock_interfaces)
end sub

sub callback_dhcp_pre_buffrq(required_buff_pages as byte)
end sub

sub callback_dhcp_buff_released()
end sub

sub callback_http_response_code_arrival(http_response as string)
end sub 

sub callback_http_header_arrival(header_type as string, header_value as string)
end sub

sub callback_http_headers_complete()
end sub



sub callback_http_content_arrival(data as string)
	select case test_no
	case 0:
		if data<>"If you can read this data, you have successfully completed a TLS web request using a Tibbo device." then
			tests(test_no).result="Content arrival data not received"
		end if
	case 1:
		if data<>"chunk"+str(chunk_loop) then
			tests(test_no).result="Content arrival data not received"
		end if
		chunk_loop=chunk_loop+1
	case 2:
		if data<>"test_data" then
			tests(test_no).result="Content arrival data not received"
		end if
	end select
end sub

sub on_dhcp_ok(renew as enum no_yes, interface as enum pl_sock_interfaces, ip as string(16), gateway_ip as string(16), netmask as string(16), lease_time as dword)
	callback_dhcp_ok(renew, interface, ip, gateway_ip, netmask, lease_time)
end sub

sub callback_http_send_headers()

	http_send_headers("Content-Type", "text/plain")

end sub